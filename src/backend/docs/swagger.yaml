openapi: 3.0.0
info:
  title: TKO Toy Co Loyalty Program API
  description: API for managing the TKO Toy Co Loyalty Program
  version: 1.0.0
  contact:
    name: TKO Toy Co
    email: support@tkotoyco.com
servers:
  - url: /api/v1
    description: API version 1
tags:
  - name: Auth
    description: Authentication and user management
  - name: Customers
    description: Customer management
  - name: Tiers
    description: Loyalty program tiers
  - name: Rewards
    description: Loyalty program rewards
  - name: Transactions
    description: Customer transactions
  - name: Cards
    description: Membership cards

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
          example: An error occurred
        code:
          type: string
          example: VALIDATION_ERROR
        details:
          type: object
          example: {}
    Customer:
      type: object
      properties:
        id:
          type: string
          format: uuid
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        birth_date:
          type: string
          format: date
        tier_id:
          type: string
          format: uuid
        points:
          type: integer
        status:
          type: string
          enum: [active, inactive, pending]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Tier:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        points_required:
          type: integer
        spending_required:
          type: number
          format: float
        multiplier:
          type: number
          format: float
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    TierBenefit:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tier_id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Reward:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        points_cost:
          type: integer
        category:
          type: string
        tier_id:
          type: string
          format: uuid
        status:
          type: string
          enum: [active, inactive, limited]
        expiry_days:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    CustomerReward:
      type: object
      properties:
        id:
          type: string
          format: uuid
        customer_id:
          type: string
          format: uuid
        reward_id:
          type: string
          format: uuid
        status:
          type: string
          enum: [issued, redeemed, expired, cancelled]
        issued_date:
          type: string
          format: date-time
        expiry_date:
          type: string
          format: date-time
        redeemed_date:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Transaction:
      type: object
      properties:
        id:
          type: string
          format: uuid
        customer_id:
          type: string
          format: uuid
        transaction_date:
          type: string
          format: date-time
        total_amount:
          type: number
          format: float
        points_earned:
          type: integer
        status:
          type: string
          enum: [completed, pending, cancelled, refunded]
        source:
          type: string
          enum: [online, in-store, mobile]
        reference_number:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    TransactionItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        transaction_id:
          type: string
          format: uuid
        product_id:
          type: string
        product_name:
          type: string
        quantity:
          type: integer
        price:
          type: number
          format: float
        total:
          type: number
          format: float
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    MembershipCard:
      type: object
      properties:
        id:
          type: string
          format: uuid
        customer_id:
          type: string
          format: uuid
        card_number:
          type: string
        status:
          type: string
          enum: [active, inactive, lost, expired]
        issued_date:
          type: string
          format: date-time
        expiry_date:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    RegisterRequest:
      type: object
      required:
        - first_name
        - last_name
        - email
        - password
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        phone:
          type: string
        birth_date:
          type: string
          format: date
    AuthResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          type: object
          properties:
            token:
              type: string
            refresh_token:
              type: string
            user:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                email:
                  type: string
                  format: email
                role:
                  type: string
                  enum: [customer, staff, admin]

paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new customer
      description: Create a new customer account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: Customer registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/login:
    post:
      tags:
        - Auth
      summary: Login to the system
      description: Authenticate a user and get access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /customers:
    get:
      tags:
        - Customers
      summary: Get all customers
      description: Retrieve a list of all customers
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
          description: Number of items per page
        - in: query
          name: sort
          schema:
            type: string
            default: created_at
          description: Field to sort by
        - in: query
          name: order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort order
      responses:
        "200":
          description: A list of customers
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Customer"
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
                      pages:
                        type: integer
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /customers/{id}:
    get:
      tags:
        - Customers
      summary: Get customer by ID
      description: Retrieve a specific customer by their ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Customer ID
      responses:
        "200":
          description: Customer details
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    $ref: "#/components/schemas/Customer"
        "404":
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /tiers:
    get:
      tags:
        - Tiers
      summary: Get all tiers
      description: Retrieve a list of all loyalty program tiers
      responses:
        "200":
          description: A list of tiers
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Tier"

  /rewards:
    get:
      tags:
        - Rewards
      summary: Get all rewards
      description: Retrieve a list of all available rewards
      responses:
        "200":
          description: A list of rewards
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Reward"

  /transactions:
    get:
      tags:
        - Transactions
      summary: Get all transactions
      description: Retrieve a list of all transactions
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
          description: Number of items per page
      responses:
        "200":
          description: A list of transactions
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Transaction"
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
                      pages:
                        type: integer
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /cards:
    get:
      tags:
        - Cards
      summary: Get all membership cards
      description: Retrieve a list of all membership cards
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
          description: Number of items per page
      responses:
        "200":
          description: A list of membership cards
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/MembershipCard"
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      limit:
                        type: integer
                      pages:
                        type: integer
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
